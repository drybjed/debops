{# Copyright (C) 2021 Maciej Delmanowski <drybjed@gmail.com>
 # Copyright (C) 2021 DebOps <https://debops.org/>
 # SPDX-License-Identifier: GPL-3.0-or-later
 #}
<?php

/* {{ ansible_managed }} */

{% if item.comment|d() %}
{{   item.comment | regex_replace('\n$','') | comment(prefix='/*', postfix=' */', decoration=' * ') }}

{% endif %}
{{ "$config = [" }}
{% macro print_value(data) %}
{%   if data is mapping %}
{%     for key, value in data.items() %}
{%       if value is not string and value is not mapping and value is iterable %}
{{         "'{}' => {}".format(key, print_value(value)) -}}
{%       else %}
{{         "'{}' => {},".format(key, print_value(value)) -}}
{%       endif %}
{%     endfor %}
{%   elif data is none %}
{{     "null" -}}
{%   elif data | bool and data is not iterable %}
{%     if data | int and data | string != 'True' %}
{{       "{}".format(data) -}}
{%     else %}
{{       "true" -}}
{%     endif %}
{%   elif not data | bool and data is not iterable %}
{%     if data is not none %}
{%       if data | int or data | string == '0' %}
{{         "{}".format(data) -}}
{%       else %}
{{         "false" -}}
{%       endif %}
{%     endif %}
{%   elif data is string %}
{{     "'{}'".format(data) -}}
{%   elif data is not string and data is not mapping and data is iterable %}
{{     "array(" }}
{{     print_array(data) | indent(4, true) -}}
{{     ")," -}}
{%   endif %}
{% endmacro %}
{% macro print_array(data) %}
{%   if data is not string and data is not mapping and data is iterable %}
{%     for entry in data %}
{%       if entry is mapping %}
{%         for key, value in entry.items() %}
{%           if key is number %}
{%             set quote_char = "" %}
{%           else %}
{%             set quote_char = "'" %}
{%           endif %}
{%           if value is none %}
{{             "{}{}{} => null,".format(quote_char, key, quote_char) }}
{%           elif value | bool and value is not iterable %}
{%             if value | int and value | string != 'True' %}
{{               "{}{}{} => {},".format(quote_char, key, quote_char, value) }}
{%             else %}
{{               "{}{}{} => true,".format(quote_char, key, quote_char) }}
{%             endif %}
{%           elif not value | bool and value is not iterable %}
{%             if value is not none %}
{%               if value | int or value | string == '0' %}
{{                 "{}{}{} => {},".format(quote_char, key, quote_char, value) }}
{%               else %}
{{                 "{}{}{} => false,".format(quote_char, key, quote_char) }}
{%               endif %}
{%             endif %}
{%           elif value is string %}
{{             "{}{}{} => '{}',".format(quote_char, key, quote_char, value) }}
{%           elif value is not string and value is not mapping and value is iterable %}
{%             if value %}
{{               "{}{}{} => array(".format(quote_char, key, quote_char) }}
{{               print_array(value) | indent(4, true) -}}
{{               ")," }}
{%             else %}
{{               "{}{}{} => array(),".format(quote_char, key, quote_char) }}
{%             endif %}
{%           endif %}
{%         endfor %}
{%       elif entry is string %}
{{         "'{}',".format(entry) }}
{%       elif entry is not string and entry is not mapping and entry is iterable %}
{{         "array(" }}
{%         for thing in entry %}
{{           print_value(thing) | indent(4, true) }}
{%         endfor %}
{{         ")," }}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endmacro %}
{% if item.options|d() %}
{%   for element in item.options %}
{%     if element.name|d() and element.state|d('present') not in [ 'absent', 'init', 'ignore' ] %}
{%       if ((element.comment|d()) or
             (element.separator|d())|bool) %}

{%       endif %}
{%       if element.comment|d() %}
{{         element.comment | regex_replace('\n$','') | comment(prefix='/*', postfix=' */', decoration=' * ') | indent(4, true) }}
{%       endif %}
{%       if element.state|d('present') == 'comment' %}
{%         set comment_state = '//' %}
{%       else %}
{%         set comment_state = '' %}
{%       endif %}
{%       if (element.quotes|d(True))|bool %}
{%         set quote_char = "'" %}
{%       else %}
{%         set quote_char = "" %}
{%       endif %}
{%       if element.option|d() %}
{%         set element_name = ([ element.option ] if element.option is string else element.option) | join("']['") %}
{%       else %}
{%         set element_name = element.name %}
{%       endif %}
{%       if element.state == 'section' %}
{%         set title_length = (element.title | d(element.name)) | length %}
{%         if not loop.first %}
{{           '\n\n' }}
{%         else %}
{{           '' }}
{%         endif %}
{%         set title_prefix = ('/' + ('{:*^' + (title_length + 4)|string + '}').format('')) %}
{%         set title_postfix = ((' {:*^' + (title_length + 4)|string + '}').format('') + '/') %}
{{         ((' | ' + (element.title | d(element.name)) + ' |') | upper) | comment(
            prefix=title_prefix,
            postfix=title_postfix,
            decoration='') | indent(4, true) }}
{%       elif element.state == 'hidden' %}
{{         '' -}}
{%       elif element.raw is not defined and element.value is not defined and element.data is not defined %}
{{         "{}'{}' => [],".format(comment_state, element_name) | indent(4, true) }}
{%       elif element.raw is defined %}
{%         if element.state|d('present') == 'comment' %}
{{           "/*" | indent(4, true) }}
{%         endif %}
{{           element.raw | regex_replace('\n$', '') | indent(4, true) }}
{%         if element.state|d('present') == 'comment' %}
{{           "*/" | indent(4, true) }}
{%         endif %}
{%       elif element.data|d() %}
{%         if element.state|d('present') == 'comment' %}
{%           set data_comment = '//' %}
{%         else %}
{%           set data_comment = '' %}
{%         endif %}
{{           "{}'{}' => [".format(data_comment, element_name) | indent(4, true) }}
{%           if element.state|d('present') == 'comment' %}
{{             (print_array(element.data) | regex_replace('\n$', '') | comment(prefix='', postfix='', decoration='//    ')) | indent(4, true) -}}
{%           else %}
{{             print_array(element.data) | indent(8, true) -}}
{%           endif %}
{{           "{}],".format(data_comment) | indent(4, true) }}
{%       elif element.value is defined %}
{%         if element.value is none %}
{{           "{}'{}' => null,".format(comment_state, element_name) | indent(4, true) }}
{%         elif element.value | bool and element.value is not iterable %}
{%           if element.value | int and element.value | string != 'True' %}
{{             "{}'{}' => {},".format(comment_state, element_name, element.value) | indent(4, true) }}
{%           else %}
{{             "{}'{}' => true,".format(comment_state, element_name) | indent(4, true) }}
{%           endif %}
{%         elif not element.value | bool and element.value is not iterable %}
{%           if element.value is not none %}
{%             if element.value | int or element.value | string == '0' %}
{{               "{}'{}' => {},".format(comment_state, element_name, element.value) | indent(4, true) }}
{%             else %}
{{               "{}'{}' => false,".format(comment_state, element_name) | indent(4, true) }}
{%             endif %}
{%           endif %}
{%         elif element.value is string %}
{{           "{}'{}' => {}{}{},".format(comment_state, element_name, quote_char, element.value, quote_char) | indent(4, true) }}
{%         elif element.value is not string and element.value is not mapping and element.value is iterable %}
{%           set array_elements = (element.value | selectattr("state", "equalto", "present") | map(attribute="name") | list) %}
{{           "{}'{}' => [{}],".format(comment_state, element_name, "'" + (array_elements | join("', '")) + "'") | indent(4, true) }}
{%         endif %}
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}
{{ "];" }}
{% if item.footer_raw|d() %}
{{ item.footer_raw | regex_replace('\n$', '') }}{% endif -%}
