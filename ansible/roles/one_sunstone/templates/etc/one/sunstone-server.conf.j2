{# Copyright (C) 2021 Maciej Delmanowski <drybjed@gmail.com>
 # Copyright (C) 2021 DebOps <https://debops.org/>
 # SPDX-License-Identifier: GPL-3.0-only
 #}
# {{ ansible_managed }}

{% for element in one_sunstone__server_combined_configuration | parse_kv_config %}
{%   if element.state|d('present') not in [ 'absent', 'ignore' ] %}
{%     if element.title|d() %}
{%       if not loop.first %}
{{         '' }}
{%       endif %}
{%       set section_line = '################################################################################' %}
{{       element.title | regex_replace('\n$','') | comment(prefix=section_line, postfix=section_line) }}
{%     elif element.comment|d() %}
{%       if not loop.first %}
{{         '' }}
{%       endif %}
{{       element.comment | regex_replace('\n$','') | comment(prefix='', postfix='') -}}
{%     elif (element.separator|d())|bool %}
{%       if not loop.first %}
{{         '' }}
{%       endif %}
{%     endif %}
{%     set element_comment = ('#' if element.state|d('present') == 'comment' else '') %}
{%     set element_name = (element.option | d(element.name)) %}
{%     set element_quote = "" %}
{%     if element.raw|d() %}
{{       '{}'.format(element.raw | regex_replace('\n$','')) }}
{%     elif element.mapping is defined %}
{%       if element.state|d('present') == 'comment' %}
{{         '{}:{}:'.format(element_comment, element_name) }}
{{         '{}'.format(element.mapping | to_nice_yaml) | regex_replace('\n$','') | indent(4, true) | comment(decoration='#', prefix='', postfix='') -}}
{%       else %}
{{         '{}:{}:'.format(element_comment, element_name) }}
{{         '{}'.format(element.mapping | to_nice_yaml) | regex_replace('\n$','') | indent(4, true) }}
{%       endif %}
{%     elif element.value is defined %}
{%       if element.value is string and not element.value | bool %}
{%         set element_value = element.value %}
{%         if ' ' in element.value %}
{%           set element_quote = "'" %}
{%         endif %}
{%       elif element.value | bool and element.value is not iterable %}
{%         if element.value | string == '1' %}
{%           set element_value = element.value %}
{%           if element.value is number %}
{%           endif %}
{%         else %}
{%           set element_value = 'yes' %}
{%         endif %}
{%       elif not element.value | bool and element.value is not iterable %}
{%         if element.value is not none %}
{%           if element.value | string == '0' %}
{%             set element_value = element.value %}
{%             if element.value is number %}
{%             endif %}
{%           else %}
{%             if element.value | int != 0 %}
{%               set element_value = element.value %}
{%             else %}
{%               set element_value = 'no' %}
{%             endif %}
{%           endif %}
{%         endif %}
{%       else %}
{%         set element_value = element.value %}
{%         if ' ' in element.value %}
{%           set element_quote = '"' %}
{%         endif %}
{%       endif %}
{%       if element_value is not string and element_value is not mapping and element_value is iterable %}
{{         '{}:{}:'.format(element_comment, element_name) }}
{%         for thing in (element_value | selectattr("state", "equalto", "present") | map(attribute="name") | list) %}
{{           '{}    - {}'.format(element_comment, thing) }}
{%         endfor %}
{%       else %}
{%         set element_lines = (element_value | regex_replace('\n$','')).split('\n') %}
{%         if element_value is iterable and element_lines | count > 1 %}
{{           '{}:{}: {}{}'.format(element_comment, element_name, element_quote, element_lines[0]) }}
{%           for line in element_lines[1:] %}
{%             if not loop.last %}
{{               '{}    {}'.format(element_comment, line) }}
{%             else %}
{{               '{}    {}{}'.format(element_comment, line, element_quote) }}
{%             endif %}
{%           endfor %}
{%         else %}
{%           if element_value != '' %}
{{             '{}:{}: {}{}{}'.format(element_comment, element_name, element_quote, element_value, element_quote) }}
{%           else %}
{{             '{}:{}:'.format(element_comment, element_name) }}
{%           endif %}
{%         endif %}
{%       endif %}
{%     endif %}
{%   endif %}
{% endfor %}
